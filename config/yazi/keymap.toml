[manager]

keymap = [
    { on = "<Esc>", run = "escape",             desc = "Exit visual mode, clear selected, or cancel search" },
    { on = "<C-[>", run = "escape",             desc = "Exit visual mode, clear selected, or cancel search" },
    { on = "q",     run = "quit",               desc = "Quit the process" },
    { on = "Q",     run = "quit --no-cwd-file", desc = "Quit the process without outputting cwd-file" },
    { on = "<C-c>", run = "close",              desc = "Close the current tab, or quit if it's last" },
    { on = "<C-z>", run = "suspend",            desc = "Suspend the process" },

    # Hopping
    { on = "k", run = "arrow -1", desc = "Move cursor up" },
    { on = "j", run = "arrow 1",  desc = "Move cursor down" },

    { on = "<Up>",    run = "arrow -1", desc = "Move cursor up" },
    { on = "<Down>",  run = "arrow 1",  desc = "Move cursor down" },

    { on = "<C-u>", run = "arrow -50%",  desc = "Move cursor up half page" },
    { on = "<C-d>", run = "arrow 50%",   desc = "Move cursor down half page" },
    { on = "<C-b>", run = "arrow -100%", desc = "Move cursor up one page" },
    { on = "<C-f>", run = "arrow 100%",  desc = "Move cursor down one page" },

    { on = "<S-PageUp>",   run = "arrow -50%",  desc = "Move cursor up half page" },
    { on = "<S-PageDown>", run = "arrow 50%",   desc = "Move cursor down half page" },
    { on = "<PageUp>",     run = "arrow -100%", desc = "Move cursor up one page" },
    { on = "<PageDown>",   run = "arrow 100%",  desc = "Move cursor down one page" },

    { on = [ "g", "g" ], run = "arrow -99999999", desc = "Move cursor to the top" },
    { on = "G",          run = "arrow 99999999",  desc = "Move cursor to the bottom" },

    # Navigation
    { on = "h", run = ["leave", "escape --find"], desc = "Go back to the parent directory" },
    # { on = "l", run = ["find --clear"], desc = "Enter the child directory" },
    # l is bind to smart enter, at the bottom

    { on = "<Left>",  run = "leave", desc = "Go back to the parent directory" },
    { on = "<Right>", run = "enter", desc = "Enter the child directory" },

    { on = "H", run = "back",    desc = "Go back to the previous directory" },
    { on = "L", run = "forward", desc = "Go forward to the next directory" },

    # Toggle
    { on = "<Space>", run = [ "toggle", "arrow 1" ], desc = "Toggle the current selection state" },
    { on = "<C-a>",   run = "toggle_all on",         desc = "Select all files" },
    { on = "<C-r>",   run = "toggle_all",            desc = "Invert selection of all files" },

    # Visual mode
    { on = "v", run = "visual_mode",         desc = "Enter visual mode (selection mode)" },
    # { on = "V", run = "visual_mode --unset", desc = "Enter visual mode (unset mode)" },
    { on = "V", run = "visual_mode", desc = "Enter visual mode (unset mode)" },

    # Seeking
    { on = "K", run = "seek -5", desc = "Seek up 5 units in the preview" },
    { on = "J", run = "seek 5",  desc = "Seek down 5 units in the preview" },

    # Spotting
    { on = "<Tab>", run = "spot", desc = "Spot hovered file" },

    # Operation
    # { on = "o",       run = "open",                        desc = "Open selected files" },
    { on = "O",         run = "open --interactive",          desc = "Open selected files interactively" },
    { on = "<Enter>",   run = "open",                        desc = "Open selected files" },
    { on = "<S-Enter>", run = "open --interactive",          desc = "Open selected files interactively" },
    # { on = "y",       run = "yank",                        desc = "Yank selected files (copy)" },

    { on = ["y", "y"], run = [
            '''
            shell 'echo file://"$@" | xclip -i -selection clipboard -t text/uri-list' --confirm
            ''',
            "yank"
        ], desc = "Copy the selected characters" },

    { on = ["y", "p"],   run = "copy path",     desc = "Copy the path" },
    { on = [ "y", "d" ], run = "copy dirname",  desc = "Copy the directory path" },
    { on = [ "y", "f" ], run = "copy filename", desc = "Copy filename" },
    # { on = [ "c", "c" ], run = "copy path",             desc = "Copy the file path" },
    # { on = [ "c", "f" ], run = "copy filename",         desc = "Copy the filename" },
    # { on = [ "c", "n" ], run = "copy name_without_ext", desc = "Copy the filename without extension" },

    { on = ["p", "p"],  run = "paste",                       desc = "Paste yanked files" },


	# #recover
    { on = ["u", "v"],  run = ["unyank", "escape"],          desc = "Paste yanked files" },
    { on = ["u", "s"],  run = ["escape --find"],          desc = "Paste yanked files" },

    { on = ["d", "d"],  run = "yank --cut",                  desc = "Yank selected files (cut)" },
    { on = "P",         run = "paste --force",               desc = "Paste yanked files (overwrite if the destination exists)" },
    { on = "-",         run = "link",                        desc = "Symlink the absolute path of yanked files" },
    { on = "_",         run = "link --relative",             desc = "Symlink the relative path of yanked files" },
    { on = "<C-->",     run = "hardlink",                    desc = "Hardlink yanked files" },
    { on = "Y",         run = "unyank",                      desc = "Cancel the yank status" },
    { on = "X",         run = "unyank",                      desc = "Cancel the yank status" },
    { on = ["d", "D"],         run = "remove",               desc = "Trash selected files" },
    # { on = "D",         run = "remove --permanently",      desc = "Permanently delete selected files" },
    { on = "a",         run = "create",                      desc = "Create a file (ends with / for directories)" },
    { on = "r",         run = "rename --cursor=before_ext",  desc = "Rename selected file(s)" },
    # { on = ";",         run = "shell --interactive",       desc = "Run a shell command" },
	{ on = ":",         run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },

    { on = "s",         run = "search fd",                   desc = "Search files by name via fd" },
    { on = "S",         run = "search rg",                   desc = "Search files by content via ripgrep" },
    { on = "<C-s>",     run = "escape --search",             desc = "Cancel the ongoing search" },
    { on = "z",         run = "plugin zoxide",               desc = "Jump to a directory via zoxide" },
    { on = "Z",         run = "plugin fzf",                  desc = "Jump to a file/directory via fzf" },

    # #open
    { on = ["o", "g"], run = "shell --block --confirm 'lazygit'",   desc = "Lazy git" },
    { on = ["o", "n"], run = "shell --block --confirm 'nvim .'",    desc = "Nvim" },
    { on = ["o", "v"], run = "shell --block --confirm 'code .'",    desc = "vscode" },
    { on = ["o", "d"], run = "shell --confirm --orphan 'dolphin .'", desc = "dolphin" },
    { on = ["o", "a"], run = "shell --block --confirm 'alacritty'", desc = "alacritty" },

    # Linemode
    { on = [ "m", "s" ], run = "linemode size",        desc = "Linemode: size" },
    { on = [ "m", "p" ], run = "linemode permissions", desc = "Linemode: permissions" },
    { on = [ "m", "b" ], run = "linemode btime",       desc = "Linemode: btime" },
    { on = [ "m", "m" ], run = "linemode mtime",       desc = "Linemode: mtime" },
    { on = [ "m", "o" ], run = "linemode owner",       desc = "Linemode: owner" },
    { on = [ "m", "n" ], run = "linemode none",        desc = "Linemode: none" },

    # Copy
    { on = [ "c", "c" ], run = "copy path",             desc = "Copy the file path" },
    { on = [ "c", "d" ], run = "copy dirname",          desc = "Copy the directory path" },
    { on = [ "c", "f" ], run = "copy filename",         desc = "Copy the filename" },
    { on = [ "c", "n" ], run = "copy name_without_ext", desc = "Copy the filename without extension" },

    # Filter
    { on = "f", run = "filter --smart", desc = "Filter files" },

    # Find
    { on = "/", run = "find --smart",            desc = "Find next file" },
    { on = "?", run = "find --previous --smart", desc = "Find previous file" },
    { on = "n", run = "find_arrow",              desc = "Goto the next found" },
    { on = "N", run = "find_arrow --previous",   desc = "Goto the previous found" },
    # { on = "N", run = "find --clear",   desc = "Goto the previous found" },

    # Sorting
    { on = [ ",", "m" ], run = [ "sort mtime --reverse=no", "linemode mtime" ], desc = "Sort by modified time" },
    { on = [ ",", "M" ], run = [ "sort mtime --reverse", "linemode mtime" ],    desc = "Sort by modified time (reverse)" },
    { on = [ ",", "b" ], run = [ "sort btime --reverse=no", "linemode btime" ], desc = "Sort by birth time" },
    { on = [ ",", "B" ], run = [ "sort btime --reverse", "linemode btime" ],    desc = "Sort by birth time (reverse)" },
    { on = [ ",", "e" ], run = "sort extension --reverse=no",                   desc = "Sort by extension" },
    { on = [ ",", "E" ], run = "sort extension --reverse",                      desc = "Sort by extension (reverse)" },
    { on = [ ",", "a" ], run = "sort alphabetical --reverse=no",                desc = "Sort alphabetically" },
    { on = [ ",", "A" ], run = "sort alphabetical --reverse",                   desc = "Sort alphabetically (reverse)" },
    { on = [ ",", "n" ], run = "sort natural --reverse=no",                     desc = "Sort naturally" },
    { on = [ ",", "N" ], run = "sort natural --reverse",                        desc = "Sort naturally (reverse)" },
    { on = [ ",", "s" ], run = [ "sort size --reverse=no", "linemode size" ],   desc = "Sort by size" },
    { on = [ ",", "S" ], run = [ "sort size --reverse", "linemode size" ],      desc = "Sort by size (reverse)" },
    { on = [ ",", "r" ], run = "sort random --reverse=no",                      desc = "Sort randomly" },

    # #goto
    { on = [ "g", "h"       ], run = "cd ~",             desc = "Go home" },
    { on = [ "g", "k"       ], run = "cd -",             desc = "Go prev folder" },
    { on = [ "g", "c"       ], run = "cd ~/.config",     desc = "Goto ~/.config" },
    { on = [ "g", "d"       ], run = "cd ~/Downloads",   desc = "Goto ~/Downloads" },
    { on = [ "g", "<Space>" ], run = "cd --interactive", desc = "Jump interactively" },
    { on = [ "g", "m"       ], run = "cd ~/Music",       desc = "Goto ~/Music" },

    # #dot
    { on = [ ".", "l"       ], run = "cd ~/.local",             desc = "Goto ~/.local" },
    { on = [ ".", "v"       ], run = "cd ~/Videos",             desc = "Goto ~/Videos" },
    { on = [ ".", "b"       ], run = "cd ~/Books",              desc = "Goto ~/Books" },
    { on = [ ".", "w"       ], run = "cd ~/Work",               desc = "Goto ~/Work" },
    { on = [ ".", "c"       ], run = "cd ~/.config",            desc = "Goto ~/.config" },
    { on = [ ".", "k", "r"  ], run = "cd /var/lib/minidlna/kr", desc = "Goto /var/lib/minidlna/kr/" },
    { on = [ ".", "d", "l"  ], run = "cd ~/Downloads",          desc = "Goto ~/Downloads" },
    { on = [ ".", "d", "o", "t"  ], run = "cd ~/Work/dotfiles",          desc = "Goto ~/Downloads" },

    { on = [ ".", "t", "r"           ], run = "cd ~/Work/transfer",      desc = "Goto ~/Work/transfer" },
    { on = [ ".", "t", "<Enter>"     ], run = "cd ~/Work/test",          desc = "Goto ~/Work/test"    },
    { on = [ ".", "h", "t", "m", "l" ], run = "cd /var/www/html",        desc = "Goto /var/www/html"  },

    { on = [ ".", "." ], run = ["hidden toggle", "arrow -99999999"], desc = "Toggle the visibility of hidden files" },

	# 下面几个是不用的规则，加上是防止yazi自动跳过字符
	# 如果只有 .html, 输入.h就会自动跳转了, 这里加上.htmv 防止跳过字符
    { on = [ ".", "h", "t", "m", "v"  ], run = "cd /var/www/html",        desc = "Goto /var/www/html" },
    { on = [ ".", "d", "d"  ],           run = "cd ~/Downloads",          desc = "Goto ~/Downloads" },
    { on = [ ".", "k", "k"  ],           run = "-",                       desc = "Goto -" },
    { on = [ ".", "d", "o", "o"  ], run = "cd ~/Work/dotfiles",          desc = "Goto ~/Downloads" },


    { on = [ "e" ],        run = ''' shell --block --confirm 'nvim "$0"' ''', desc = "Jump interactively" },

    # Tabs
    { on = ["t", "u"], run = "tab_create --current", desc = "Create a new tab with CWD" },
    { on = ["t", "q"], run = "close", desc = "Close current tab" },

    { on = ["t", "1"], run = "tab_switch 0", desc = "Switch to the first tab" },
    { on = ["t", "2"], run = "tab_switch 1", desc = "Switch to the second tab" },
    { on = ["t", "3"], run = "tab_switch 2", desc = "Switch to the third tab" },
    { on = ["t", "4"], run = "tab_switch 3", desc = "Switch to the fourth tab" },
    { on = ["t", "5"], run = "tab_switch 4", desc = "Switch to the fifth tab" },
    { on = ["t", "6"], run = "tab_switch 5", desc = "Switch to the sixth tab" },
    { on = ["t", "7"], run = "tab_switch 6", desc = "Switch to the seventh tab" },
    { on = ["t", "8"], run = "tab_switch 7", desc = "Switch to the eighth tab" },
    { on = ["t", "9"], run = "tab_switch 8", desc = "Switch to the ninth tab" },

    { on = "[", run = "tab_switch -1 --relative", desc = "Switch to the previous tab" },
    { on = "]", run = "tab_switch 1 --relative",  desc = "Switch to the next tab" },

    { on = "{", run = "tab_swap -1", desc = "Swap current tab with previous tab" },
    { on = "}", run = "tab_swap 1",  desc = "Swap current tab with next tab" },

    # Tasks
    { on = "w", run = "tasks_show", desc = "Show task manager" },

    # Help
    { on = "~",    run = "help", desc = "Open help" },
    { on = "<F1>", run = "help", desc = "Open help" },
]

[tasks]

keymap = [
    { on = "<Esc>", run = "close", desc = "Close task manager" },
    { on = "<C-[>", run = "close", desc = "Close task manager" },
    { on = "<C-c>", run = "close", desc = "Close task manager" },
    { on = "w",     run = "close", desc = "Close task manager" },

    { on = "k", run = "arrow -1", desc = "Move cursor up" },
    { on = "j", run = "arrow 1",  desc = "Move cursor down" },

    { on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
    { on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

    { on = "<Enter>", run = "inspect", desc = "Inspect the task" },
    { on = "x",       run = "cancel",  desc = "Cancel the task" },

    # Help
    { on = "~",    run = "help", desc = "Open help" },
    { on = "<F1>", run = "help", desc = "Open help" },
]

[spot]

keymap = [
    { on = "<Esc>", run = "close", desc = "Close the spot" },
    { on = "<C-[>", run = "close", desc = "Close the spot" },
    { on = "<C-c>", run = "close", desc = "Close the spot" },
    { on = "<Tab>", run = "close", desc = "Close the spot" },

    { on = "k", run = "arrow -1", desc = "Move cursor up" },
    { on = "j", run = "arrow 1",  desc = "Move cursor down" },
    { on = "h", run = "swipe -1", desc = "Swipe to the next file" },
    { on = "l", run = "swipe 1",  desc = "Swipe to the previous file" },

    { on = "<Up>",    run = "arrow -1", desc = "Move cursor up" },
    { on = "<Down>",  run = "arrow 1",  desc = "Move cursor down" },
    { on = "<Left>",  run = "swipe -1", desc = "Swipe to the next file" },
    { on = "<Right>", run = "swipe 1",  desc = "Swipe to the previous file" },

    # Copy
    { on = [ "c", "c" ], run = "copy cell", desc = "Copy selected cell" },

    # Help
    { on = "~",    run = "help", desc = "Open help" },
    { on = "<F1>", run = "help", desc = "Open help" },
]

[pick]

keymap = [
    { on = "<Esc>",   run = "close",          desc = "Cancel pick" },
    { on = "<C-[>",   run = "close",          desc = "Cancel pick" },
    { on = "<C-c>",   run = "close",          desc = "Cancel pick" },
    { on = "<Enter>", run = "close --submit", desc = "Submit the pick" },

    { on = "k", run = "arrow -1", desc = "Move cursor up" },
    { on = "j", run = "arrow 1",  desc = "Move cursor down" },

    { on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
    { on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

    # Help
    { on = "~",    run = "help", desc = "Open help" },
    { on = "<F1>", run = "help", desc = "Open help" },
]

[input]

keymap = [
    { on = "<C-c>",   run = "close",          desc = "Cancel input" },
    { on = "<Enter>", run = "close --submit", desc = "Submit input" },
    { on = "<Esc>",   run = ["close"],         desc = "Go back the normal mode, or cancel input" },
    { on = "<C-[>",   run = "escape",         desc = "Go back the normal mode, or cancel input" },

    # Mode
    { on = "i", run = "insert",                              desc = "Enter insert mode" },
    { on = "a", run = "insert --append",                     desc = "Enter append mode" },
    { on = "I", run = [ "move -999", "insert" ],             desc = "Move to the BOL, and enter insert mode" },
    { on = "A", run = [ "move 999", "insert --append" ],     desc = "Move to the EOL, and enter append mode" },
    { on = "v", run = "visual",                              desc = "Enter visual mode" },
    { on = "V", run = [ "move -999", "visual", "move 999" ], desc = "Enter visual mode and select all" },

    # Character-wise movement
    { on = "h",       run = "move -1", desc = "Move back a character" },
    { on = "l",       run = "move 1",  desc = "Move forward a character" },
    { on = "<Left>",  run = "move -1", desc = "Move back a character" },
    { on = "<Right>", run = "move 1",  desc = "Move forward a character" },
    { on = "<C-b>",   run = "move -1", desc = "Move back a character" },
    { on = "<C-f>",   run = "move 1",  desc = "Move forward a character" },

    # Word-wise movement
    { on = "b",     run = "backward",              desc = "Move back to the start of the current or previous word" },
    { on = "w",     run = "forward",               desc = "Move forward to the start of the next word" },
    { on = "e",     run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },
    { on = "<A-b>", run = "backward",              desc = "Move back to the start of the current or previous word" },
    { on = "<A-f>", run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },

    # Line-wise movement
    { on = "0",      run = "move -999", desc = "Move to the BOL" },
    { on = "$",      run = "move 999",  desc = "Move to the EOL" },
    { on = "<C-a>",  run = "move -999", desc = "Move to the BOL" },
    { on = "<C-e>",  run = "move 999",  desc = "Move to the EOL" },
    { on = "<Home>", run = "move -999", desc = "Move to the BOL" },
    { on = "<End>",  run = "move 999",  desc = "Move to the EOL" },

    # Delete
    { on = "<Backspace>", run = "backspace",         desc = "Delete the character before the cursor" },
    { on = "<Delete>",    run = "backspace --under", desc = "Delete the character under the cursor" },
    { on = "<C-h>",       run = "backspace",         desc = "Delete the character before the cursor" },
    { on = "<C-d>",       run = "backspace --under", desc = "Delete the character under the cursor" },

    # Kill
    { on = "<C-u>", run = "kill bol",      desc = "Kill backwards to the BOL" },
    { on = "<C-k>", run = "kill eol",      desc = "Kill forwards to the EOL" },
    { on = "<C-w>", run = "kill backward", desc = "Kill backwards to the start of the current word" },
    { on = "<A-d>", run = "kill forward",  desc = "Kill forwards to the end of the current word" },

    # Cut/Yank/Paste
    { on = "d", run = "delete --cut",                              desc = "Cut the selected characters" },
    { on = "D", run = [ "delete --cut", "move 999" ],              desc = "Cut until the EOL" },
    { on = "c", run = "delete --cut --insert",                     desc = "Cut the selected characters, and enter insert mode" },
    { on = "C", run = [ "delete --cut --insert", "move 999" ],     desc = "Cut until the EOL, and enter insert mode" },
    { on = "x", run = [ "delete --cut", "move 1 --in-operating" ], desc = "Cut the current character" },
    { on = "y", run = "yank",                                      desc = "Copy the selected characters" },
    { on = "p", run = "paste",                                     desc = "Paste the copied characters after the cursor" },
    { on = "P", run = "paste --before",                            desc = "Paste the copied characters before the cursor" },

    # Undo/Redo
    { on = "u",     run = "undo", desc = "Undo the last operation" },
    { on = "<C-r>", run = "redo", desc = "Redo the last operation" },

    # Help
    { on = "~",    run = "help", desc = "Open help" },
    { on = "<F1>", run = "help", desc = "Open help" },
]

[confirm]

keymap = [
    { on = "<Esc>",   run = "close",          desc = "Cancel the confirm" },
    { on = "<C-[>",   run = "close",          desc = "Cancel the confirm" },
    { on = "<C-c>",   run = "close",          desc = "Cancel the confirm" },
    { on = "<Enter>", run = "close --submit", desc = "Submit the confirm" },

    { on = "n", run = "close",          desc = "Cancel the confirm" },
    { on = "y", run = "close --submit", desc = "Submit the confirm" },

    { on = "k", run = "arrow -1", desc = "Move cursor up" },
    { on = "j", run = "arrow 1",  desc = "Move cursor down" },

    { on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
    { on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

    # Help
    { on = "~",    run = "help", desc = "Open help" },
    { on = "<F1>", run = "help", desc = "Open help" },
]

[completion]

keymap = [
    { on = "<C-c>",   run = "close",                                      desc = "Cancel completion" },
    { on = "<Tab>",   run = "close --submit",                             desc = "Submit the completion" },
    { on = "<Enter>", run = [ "close --submit", "close_input --submit" ], desc = "Submit the completion and input" },

    { on = "<A-k>", run = "arrow -1", desc = "Move cursor up" },
    { on = "<A-j>", run = "arrow 1",  desc = "Move cursor down" },

    { on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
    { on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

    { on = "<C-p>", run = "arrow -1", desc = "Move cursor up" },
    { on = "<C-n>", run = "arrow 1",  desc = "Move cursor down" },

    # Help
    { on = "~",    run = "help", desc = "Open help" },
    { on = "<F1>", run = "help", desc = "Open help" },
]

[help]

keymap = [
    { on = "<Esc>", run = "escape", desc = "Clear the filter, or hide the help" },
    { on = "<C-[>", run = "escape", desc = "Clear the filter, or hide the help" },
    { on = "<C-c>", run = "close",  desc = "Hide the help" },

    # Navigation
    { on = "k", run = "arrow -1", desc = "Move cursor up" },
    { on = "j", run = "arrow 1",  desc = "Move cursor down" },

    { on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
    { on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

    # Filtering
    { on = "f", run = "filter", desc = "Apply a filter for the help items" },
]


[[manager.prepend_keymap]]
on = [ "1" ]
run = "plugin relative-motions --args=1"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on = [ "2" ]
run = "plugin relative-motions --args=2"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on = [ "3" ]
run = "plugin relative-motions --args=3"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on = [ "4" ]
run = "plugin relative-motions --args=4"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on = [ "5" ]
run = "plugin relative-motions --args=5"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on = [ "6" ]
run = "plugin relative-motions --args=6"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on = [ "7" ]
run = "plugin relative-motions --args=7"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on = [ "8" ]
run = "plugin relative-motions --args=8"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on = [ "9" ]
run = "plugin relative-motions --args=9"
desc = "Move in relative steps"

[[manager.prepend_keymap]]
on   = "l"
run  = ["plugin smart-enter", "escape --find"]
desc = "Enter the child directory, or open the file"

[[manager.prepend_keymap]]
on   = "<Enter>"
run  = ["plugin smart-enter", "escape --find"]
desc = "Enter the child directory, or open the file"

[[manager.prepend_keymap]]
on   = "i"
run  = "plugin toggle-view --args=preview"
desc = "toglle preview"

[[manager.prepend_keymap]]
on   = "I"
run  = "plugin toggle-view --args=fullscr"
desc = "toglle preview"

[[manager.prepend_keymap]]
on = ["C"]
run = "plugin ouch --args=zip"
desc = "Compress with ouch"

# [[manager.prepend_keymap]]
# on = [ ":" ]
# run = "plugin custom-shell --interactive --args='zsh --no-block --orphan --no-confirm'"
# # OR
# # run = "plugin custom-shell --args='zsh -nb -o -nc'"
# desc = "custom-shell as default with specified arguments"
# # run = "plugin custom-shell --args='zsh --no-block --orphan --no-confirm'"
